package LeetCode376;

public class Solution {
    /**
     * 如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。
     * 第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。
     *
     * 例如，[1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3)是正负交替出现的。
     * 相反, [1,4,7,2,5]和[1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。
     *
     * 给定一个整数序列，返回作为摆动序列的最长子序列的长度。
     * 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。
     *
     * 「局部最优：删除单调坡度上的节点（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值」。
     * 「整体最优：整个序列有最多的局部峰值，从而达到最长摆动序列」
     *
     * 让峰值尽可能的保持峰值，然后删除单一坡度上的节点
     *
     *
     *
     */
    public int wiggleMaxLength(int[] nums) {
        // 边界条件
        if (nums.length <= 1)
            return nums.length;

        // 当前的一对差值
        int curDiff = 0;
        // 前一对差值
        int preDiff = 0;
        // 记录峰值个数，默认序列最右边有一个峰值
        int result = 1;
        for (int i = 1; i < nums.length; i ++){
            curDiff = nums[i] - nums[i-1];
            // 出现峰值
            if ((curDiff > 0 && preDiff <= 0) || (preDiff >=0 && curDiff < 0)){
                result ++;
                preDiff = curDiff;
            }
        }

        return result;
    }
}
