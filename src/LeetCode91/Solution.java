package LeetCode91;

public class Solution {
    /**
     * 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
     * 'A' -> 1 'B' -> 2 ... 'Z' -> 26
     *
     * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
     *   "AAJF" ，将消息分组为 (1 1 10 6)
     *   "KJF" ，将消息分组为 (11 10 6)
     *
     * 注意，消息不能分组为 (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
     * 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
     * 题目数据保证答案肯定是一个 32 位 的整数。
     *
     * 输入：s = "12"
     * 输出：2
     * 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
     *
     * 输入：s = "226"
     * 输出：3
     * 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
     *
     * 题目案例给的标注解法是动态规划，就按动态规划来做
     * 只关心「位置 i 自己能否形成独立 item 」和「位置 i 能够与上一位置（i-1）能否形成 item」，而不关心 i-1 之前的位置。
     * 对于字符串s中任意位置i而言，存在三种情况：
     *   只能由位置 i 的单独作为一个 item，设为 a，转移的前提是 a 的数值范围为 [1,9]，转移逻辑为 f[i] = f[i-1]。
     *   只能由位置 i 的与前一位置（i-1）共同作为一个 item，设为 b，转移的前提是 b 的数值范围为 [10,26]，转移逻辑为 f[i] = f[i-2]。
     *   位置 i 既能作为独立 item 也能与上一位置形成 item，转移逻辑为 f[i] = f[i-1] + f[i-2]。
     *
     */

    public int numDecodings(String s) {

        // 试试前插入空格
        s = " " + s;
        // 创建dp，到每一个元素的时候总共有几种解法
        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        for (int i = 1; i < s.length(); i ++){
            // a : 代表「当前位置」单独形成 item
            // b : 代表「当前位置」与「前一位置」共同形成 item
            int a = s.charAt(i) - '0';
            int b = (s.charAt(i-1) - '0') * 10 + a;
            if (1 <= a && a <= 9)
                dp[i] = dp[i-1];
            if (i > 1 && 10 <= b && b <= 26)
                dp[i] = dp[i] + dp[i-2];// dp[i-1]+dp[i-2]
        }
        // 加了一个前导空格，需要-1
        return dp[s.length()-1];
    }

    public static void main(String[] args) {
        String s = "226";
        int res = new Solution().numDecodings(s);
        System.out.println(res);
    }
}
