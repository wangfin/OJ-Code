package Offer11;

import java.util.Arrays;

public class Solution {
    /**
     * 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。
     * 例如，数组[3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。
     *
     * 试了下将数组排序，然后输出，是可以通过的，额，好像一次遍历效率更高
     * 还想到使用找那个导数下降的位置，就是旋转点，复杂度O(n/2)
     * 这道题和LeetCode153相同，想想还是有差异的，主要是数字能否重复出现
     *
     * 然后题解上是二分法，可以将 遍历法 的 线性级别 时间复杂度降低至 对数级别
     * 1.初始化： 声明 i, j 双指针分别指向 nums 数组左右两端；
     * 2.循环二分： 设 m = (i + j) / 2为每次二分的中点（ "/" 代表向下取整除法，因此恒有 i≤m<j ），可分为以下三种情况：
     *   1.当 nums[m] > nums[j] 时： m 一定在 左排序数组 中，即旋转点 x 一定在 [m + 1, j] 闭区间内，因此执行 i = m + 1；
     *   2.当 nums[m] < nums[j] 时： m 一定在 右排序数组 中，即旋转点 x 一定在[i, m] 闭区间内，因此执行 j = m；
     *   3.当 nums[m] = nums[j] 时： 无法判断 m 在哪个排序数组中，即无法判断旋转点 x 在 [i, m]还是 [m + 1, j] 区间中。
     *   解决方案： 执行 j = j - 1 缩小判断范围，分析见下文。
     * 3.返回值： 当 i = j 时跳出二分循环，并返回 旋转点的值 nums[i] 即可。
     *
     */
    public int minArray(int[] numbers) {
        // 二分法
        int left = 0;
        int right = numbers.length - 1;
        while (left < right){
            int mid = left + (right - left) / 2;
            // 不能使用左边界进行比较，因为左边本来就是递增的
            // 如果大于也不能保证转换点不在
            if (numbers[mid] > numbers[right]){// 中间值比右边界高，说明左边一直递增，所以旋转点在右侧
                // 移动左边界
                left = mid + 1;
            }else if(numbers[mid] < numbers[right]){// 中间值比右边界低，说明左边出现断层，所以旋转点在左侧
                // 移动右边界
                right = mid;
            }else{
                // 因为这次题目中可能会有重复的数字，所以中间值可能等于边界值
                // 题解给出的做法是直接将右边界--，跳出循环
                right--;
            }
        }
        return numbers[left];
    }

}
